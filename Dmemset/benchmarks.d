/*
   Boost Software License - Version 1.0 - August 17th, 2003

   Permission is hereby granted, free of charge, to any person or organization
   obtaining a copy of the software and accompanying documentation covered by
   this license (the "Software") to use, reproduce, display, distribute,
   execute, and transmit the Software, and to prepare derivative works of the
   Software, and to permit third-parties to whom the Software is furnished to
   do so, all subject to the following:

   The copyright notices in the Software and this entire statement, including
   the above license grant, this restriction and the following disclaimer,
   must be included in all copies of the Software, in whole or in part, and
   all derivative works of the Software, unless such copies or derivative
   works are solely in the form of machine-executable object code generated by
   a source language processor.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

import std.datetime.stopwatch;
import Dmemset: Dmemset;
import std.random;
import std.stdio;
import core.stdc.string;
import std.traits;

// NOTE(stefanos): For benchmarking, we're concerning ourselves only
// with the `ubyte` type. That is for simpler code as the target here
// is to test speed. You can refer to tests.d for correctness testing.

static string genTests()
{
    string res;
    import std.conv : text;
    foreach(i; 1..257)
    {
        res ~= "test!("~text(i)~")(5);";
    }
    return res;
}

void main(string[] args)
{
    writeln("size(bytes) Cmemmove(GB/s) Dmemmove(GB/s)");
    
    test!(1)(5);
	test!(2)(5);
	test!(3)(5);
	test!(4)(5);
	test!(5)(5);
	test!(6)(5);
	test!(7)(5);
	test!(8)(5);
	test!(9)(5);
	test!(10)(5);
	test!(11)(5);
	test!(12)(5);
	test!(13)(5);
	test!(14)(5);
	test!(15)(5);
	test!(16)(5);
	test!(17)(5);
	test!(18)(5);
	test!(19)(5);
	test!(20)(5);
	test!(21)(5);
	test!(22)(5);
	test!(23)(5);
	test!(24)(5);
	test!(25)(5);
	test!(26)(5);
	test!(27)(5);
	test!(28)(5);
	test!(29)(5);
	test!(30)(5);
	test!(31)(5);
	test!(32)(5);
	test!(33)(5);
	test!(34)(5);
	test!(35)(5);
	test!(36)(5);
	test!(37)(5);
	test!(38)(5);
	test!(39)(5);
	test!(40)(5);
	test!(41)(5);
	test!(42)(5);
	test!(43)(5);
	test!(44)(5);
	test!(45)(5);
	test!(46)(5);
	test!(47)(5);
	test!(48)(5);
	test!(49)(5);
	test!(50)(5);
	test!(51)(5);
	test!(52)(5);
	test!(53)(5);
	test!(54)(5);
	test!(55)(5);
	test!(56)(5);
	test!(57)(5);
	test!(58)(5);
	test!(59)(5);
	test!(60)(5);
	test!(61)(5);
	test!(62)(5);
	test!(63)(5);
	test!(64)(5);
	test!(65)(5);
	test!(66)(5);
	test!(67)(5);
	test!(68)(5);
	test!(69)(5);
	test!(70)(5);
	test!(71)(5);
	test!(72)(5);
	test!(73)(5);
	test!(74)(5);
	test!(75)(5);
	test!(76)(5);
	test!(77)(5);
	test!(78)(5);
	test!(79)(5);
	test!(80)(5);
	test!(81)(5);
	test!(82)(5);
	test!(83)(5);
	test!(84)(5);
	test!(85)(5);
	test!(86)(5);
	test!(87)(5);
	test!(88)(5);
	test!(89)(5);
	test!(90)(5);
	test!(91)(5);
	test!(92)(5);
	test!(93)(5);
	test!(94)(5);
	test!(95)(5);
	test!(96)(5);
	test!(97)(5);
	test!(98)(5);
	test!(99)(5);
	test!(100)(5);
	test!(101)(5);
	test!(102)(5);
	test!(103)(5);
	test!(104)(5);
	test!(105)(5);
	test!(106)(5);
	test!(107)(5);
	test!(108)(5);
	test!(109)(5);
	test!(110)(5);
	test!(111)(5);
	test!(112)(5);
	test!(113)(5);
	test!(114)(5);
	test!(115)(5);
	test!(116)(5);
	test!(117)(5);
	test!(118)(5);
	test!(119)(5);
	test!(120)(5);
	test!(121)(5);
	test!(122)(5);
	test!(123)(5);
	test!(124)(5);
	test!(125)(5);
	test!(126)(5);
	test!(127)(5);
	test!(128)(5);
	test!(129)(5);
	test!(130)(5);
	test!(131)(5);
	test!(132)(5);
	test!(133)(5);
	test!(134)(5);
	test!(135)(5);
	test!(136)(5);
	test!(137)(5);
	test!(138)(5);
	test!(139)(5);
	test!(140)(5);
	test!(141)(5);
	test!(142)(5);
	test!(143)(5);
	test!(144)(5);
	test!(145)(5);
	test!(146)(5);
	test!(147)(5);
	test!(148)(5);
	test!(149)(5);
	test!(150)(5);
	test!(151)(5);
	test!(152)(5);
	test!(153)(5);
	test!(154)(5);
	test!(155)(5);
	test!(156)(5);
	test!(157)(5);
	test!(158)(5);
	test!(159)(5);
	test!(160)(5);
	test!(161)(5);
	test!(162)(5);
	test!(163)(5);
	test!(164)(5);
	test!(165)(5);
	test!(166)(5);
	test!(167)(5);
	test!(168)(5);
	test!(169)(5);
	test!(170)(5);
	test!(171)(5);
	test!(172)(5);
	test!(173)(5);
	test!(174)(5);
	test!(175)(5);
	test!(176)(5);
	test!(177)(5);
	test!(178)(5);
	test!(179)(5);
	test!(180)(5);
	test!(181)(5);
	test!(182)(5);
	test!(183)(5);
	test!(184)(5);
	test!(185)(5);
	test!(186)(5);
	test!(187)(5);
	test!(188)(5);
	test!(189)(5);
	test!(190)(5);
	test!(191)(5);
	test!(192)(5);
	test!(193)(5);
	test!(194)(5);
	test!(195)(5);
	test!(196)(5);
	test!(197)(5);
	test!(198)(5);
	test!(199)(5);
	test!(200)(5);
	test!(201)(5);
	test!(202)(5);
	test!(203)(5);
	test!(204)(5);
	test!(205)(5);
	test!(206)(5);
	test!(207)(5);
	test!(208)(5);
	test!(209)(5);
	test!(210)(5);
	test!(211)(5);
	test!(212)(5);
	test!(213)(5);
	test!(214)(5);
	test!(215)(5);
	test!(216)(5);
	test!(217)(5);
	test!(218)(5);
	test!(219)(5);
	test!(220)(5);
	test!(221)(5);
	test!(222)(5);
	test!(223)(5);
	test!(224)(5);
	test!(225)(5);
	test!(226)(5);
	test!(227)(5);
	test!(228)(5);
	test!(229)(5);
	test!(230)(5);
	test!(231)(5);
	test!(232)(5);
	test!(233)(5);
	test!(234)(5);
	test!(235)(5);
	test!(236)(5);
	test!(237)(5);
	test!(238)(5);
	test!(239)(5);
	test!(240)(5);
	test!(241)(5);
	test!(242)(5);
	test!(243)(5);
	test!(244)(5);
	test!(245)(5);
	test!(246)(5);
	test!(247)(5);
	test!(248)(5);
	test!(249)(5);
	test!(250)(5);
	test!(251)(5);
	test!(252)(5);
	test!(253)(5);
	test!(254)(5);
	test!(255)(5);
	test!(256)(5);
	
    test!(500)(5);
    test!(700)(5);
    test!(3434)(5);
    test!(7128)(5);
    test!(13908)(5);
    test!(16343)(5);
    test!(27897)(5);
    test!(32344)(5);
    test!(46830)(5);
    test!(64349)(5);
}

// From a very good Chandler Carruth video on benchmarking: https://www.youtube.com/watch?v=nXaxk27zwlk
void escape(void* p)
{
    version(LDC)
    {
        import ldc.llvmasm;
        __asm("", "r,~{memory}", p);
    }
    version(GNU)
    {
        asm { "" : : "g" p : "memory"; }
    }
}

void Cmemset(ref ubyte[] dst, const ubyte v)
{
    import core.stdc.string: memset;
    pragma(inline, true)
    memset(dst.ptr, v, dst.length);
}

Duration benchmark(alias f)(ref ubyte[] dst, const ubyte v, ulong* bytesCopied)
{
    size_t iterations = 2^^20 / dst.length;
    Duration result;
    auto swt = StopWatch(AutoStart.yes);
    swt.reset();
    while(swt.peek().total!"msecs" < 5)
    {
        auto sw = StopWatch(AutoStart.yes);
        sw.reset();
        foreach (_; 0 .. iterations)
        {
            escape(dst.ptr);   // So optimizer doesn't remove code
            f(dst, v);
        }
        result += sw.peek();
        *bytesCopied += (iterations * dst.length);
    }

    return result;
}

void init(ref ubyte[] v)
{

    for(int i = 0; i < v.length; i++)
    {
        v[i] = uniform!ubyte;
    }
}

void verify(string name)(int j, const ref ubyte[] a, const ubyte v)
{
    for(size_t i = 0; i < a.length; i++)
    {
        assert(a.ptr[i] == v);
    }
}

void test(size_t n)(ubyte v)
{
    ubyte[n + 32] buf;

    double TotalGBperSec1 = 0.0;
    double TotalGBperSec2 = 0.0;
    enum alignments = 32;
    size_t len = n;

    foreach(i; 0..alignments)
    {
        auto d = buf[i..i+n];

        ulong bytesCopied1;
        ulong bytesCopied2;
        init(d);
        immutable d1 = benchmark!(Cmemset)(d, v, &bytesCopied1);
        verify!("Cmemset")(i, d, v);


        init(d);
        immutable d2 = benchmark!(Dmemset)(d, v, &bytesCopied2);
        verify!("Dmemset")(i, d, v);

        auto secs1 = (cast(double)(d1.total!"nsecs")) / 1_000_000_000.0;
        auto secs2 = (cast(double)(d2.total!"nsecs")) / 1_000_000_000.0;
        auto GB1 = (cast(double)bytesCopied1) / 1_000_000_000.0;
        auto GB2 = (cast(double)bytesCopied2) / 1_000_000_000.0;
        auto GBperSec1 = GB1 / secs1;
        auto GBperSec2 = GB2 / secs2;
        TotalGBperSec1 += GBperSec1;
        TotalGBperSec2 += GBperSec2;
    }

    writeln(len, " ", TotalGBperSec1 / alignments, " ", TotalGBperSec2 / alignments);
}
